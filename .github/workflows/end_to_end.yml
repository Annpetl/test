name: E2E Tests

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      env:
        description: "Target environment"
        required: false
        default: "staging"
        type: choice
        options:
          - staging
      tenant:
        description: "Tenant name"
        required: false
        type: choice
        options:
          - videoland
      customer:
        description: "Customer name"
        required: false
        type: choice
        options:
          - rtlnl
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      tenant:
        required: true
        type: string
      customer:
        required: true
        type: string
      pr_number:
        required: true
        type: string

permissions:
  pull-requests: write
  contents: read

jobs:
  e2e-tests:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    environment: ${{ inputs.env || 'staging' }}

    steps:
      - name: Set BASE_URL based on environment
        env:
          PR_NUMBER: ${{ inputs.pr_number || github.event.pull_request.number || 1 }}
        run: |
          if [ -n "$PR_NUMBER" ] && [ "$PR_NUMBER" != "1" ]; then
            BASE_URL="https://content-discovery-assistant-${{ inputs.customer }}-$PR_NUMBER.preview.${{ inputs.tenant }}.bedrock.tech"
          else
            BASE_URL="https://content-discovery-assistant-${{ inputs.customer }}.staging.${{ inputs.tenant }}.bedrock.tech"
          fi
          echo "BASE_URL=$BASE_URL" >> $GITHUB_ENV
          echo "Using BASE_URL: $BASE_URL"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install pipx
          pipx install poetry==1.8.2
          poetry install --no-interaction --no-ansi
          poetry run pip install pytest-md-report

      - name: Run tests and handle report
        run: |
          # Run tests and generate report
          set +e
          poetry run pytest -c tests/e2e_tests.ini \
            --md-report \
            --md-report-flavor github \
            --md-report-output=report.md
          pytest_exit=$?
          set -e

          # Process report if generated, otherwise create minimal one
          if [ -f "report.md" ]; then
            echo "Processing generated report.md"
            # Clean LaTeX formatting
            sed -i 's/\$\\textcolor{#23d18b}{\\tt{\([^}]*\)}}\$/\1/g' report.md
            sed -i 's/\\_/_/g' report.md
          else
            echo "Creating minimal test report"
            echo "## Test Results" > report.md
            echo "- No markdown report was generated by pytest-md-report" >> report.md
            echo "- Exit code: $pytest_exit" >> report.md
          fi

          # Always add basic test results
          echo "" >> report.md
          echo "### Test Summary" >> report.md
          echo "- Base URL: $BASE_URL" >> report.md
          echo "- Environment: ${{ inputs.env || 'staging' }}" >> report.md

      - name: Upload Markdown report
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-report
          path: report.md

      - name: Post test report as PR comment
        if: ${{ github.event_name == 'pull_request' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: report.md
          header: test-report
          recreate: true

      - name: Add test report to workflow summary
        run: |
          echo "### ðŸ§ª E2E Test Report" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ inputs.env || 'staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Base URL:** ${{ env.BASE_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat report.md >> $GITHUB_STEP_SUMMARY

      - name: Fail if tests failed
        if: ${{ failure() }}
        run: exit 1